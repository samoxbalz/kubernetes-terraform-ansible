---
apiVersion: kubeadm.k8s.io/v1beta3
caCertPath: /etc/kubernetes/pki/ca.crt
kind: JoinConfiguration
discovery:
  bootstrapToken:
    apiServerEndpoint: {{ kubeadm_cluster_api_hostname }}:{{ loadbalancer_apiserver_port }}
    token: {{ kubeadm_worker_join_command.stdout }}
    caCertHashes:
      - sha256:{{ kubeadm_worker_ca_hash.stdout | trim }}
  timeout: 5m0s
nodeRegistration:
  criSocket: {{ kubeadm_cri_socket }}
  name: {{ inventory_hostname }}
  taints: []
  imagePullPolicy: IfNotPresent
  ignorePreflightErrors:
    - ImagePull
patches:
  directory: /etc/kubernetes/kubeadm/patches
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: {{ kubernetes_version }}
apiServer:
  timeoutForControlPlane: 4m0s
  insecure-port: 0
  extraArgs:
    event-ttl: 1h0m0s
certificatesDir: /etc/kubernetes/pki
clusterName: {{ kubeadm_masters_init_cluster_name }}
controllerManager: {}
dns: {}
imageRepository: k8s.gcr.io
controlPlaneEndpoint: {{ kubeadm_cluster_api_hostname }}
networking:
  dnsDomain: cluster.local
  serviceSubnet: {{ kubeadm_masters_init_service_cidr }}
  podSubnet: {{ kubeadm_masters_init_pod_network_cidr }}
scheduler: {}
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
rotateCertificates: true
serverTLSBootstrap: true
enableServer: true
readOnlyPort: 0
authentication:
  anonymous:
    enabled: false
  webhook:
    cacheTTL: 2m0s
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt
authorization:
  mode: Webhook
  webhook:
    cacheAuthorizedTTL: 5m0s
    cacheUnauthorizedTTL: 30s